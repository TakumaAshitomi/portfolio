version: 2
jobs:
  rubocop:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          RAILS_ENV: test
          POSTGRES_HOST: 127.0.0.1
      - image: circleci/postgres:11-alpine-postgis-ram
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: myapp_test
          POSTGRES_PASSWORD: password
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      # Rubocop
      - run:
          name: Rubocop
          command: bundle exec rubocop
  rspec:
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          RAILS_ENV: test
          POSTGRES_HOST: 127.0.0.1
      - image: circleci/postgres:11-alpine-postgis-ram
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: myapp_test
          POSTGRES_PASSWORD: password
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load
      # Rspec
      - run: sudo apt update
      - run: sudo apt upgrade
      - run:
          name: Rspec
          command: bundle exec rspec
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: docker-compose build
          command: docker-compose build
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: "build docker image"
          # registry.heroku.com/${HEROKU_APP_NAME}/webは変更することは出来ません．
          command: docker build --rm=false -t registry.heroku.com/${HEROKU_APP_NAME}/web .
      - run:
          name: setup heroku command
          # CircleCIからHerokuへデプロイするためのスクリプトを実行
          command: bash .circleci/setup_heroku.sh
      - run:
          name: heroku maintenance on
          # Herokuのアプリをメンテナンス中にする
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          # HEROKU_AUTH_TOKEN is generated by `heroku auth:token`
          name: "push container to registry.heroku.com"
          # Herokuへログインし，作成したイメージをPush,Releaseします．
          command: |
            docker login --username=_ --password=${HEROKU_API_TOKEN} registry.heroku.com
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:push web --app ${HEROKU_APP_NAME}
            heroku container:release web --app ${HEROKU_APP_NAME}
      - run:
          name: heroku maintenance off
          # メンテナンスモードをオフにします．
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}
workflows:
  version: 2
  rubocop_rspec:
    jobs:
      - rubocop
      - rspec:
          requires:
            - rubocop
      - build:
          requires:
            - rspec
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
